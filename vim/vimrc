" URL: http://github.com/sjsawyer/vim/vimrc
" Author: Shaun Sawyer
" Descripion:
"     The goal of this vimrc file is to be both minimalistic but functional.
"     That is, include a lot of nice features but in a way as to not overload
"     vim with unnecessary plugins etc. We will see how that goes. Perhaps I
"     will just end up adding a clusterf*** of plugins.
"
" Credit:
"
"     http://vim.wikia.com/wiki/Example_vimrc
"
"     Max Cantor's talk from the NYC Vim Meetup,
"         'How to Do 90% of What Plugins Do with just Vim'
"         https://www.youtube.com/watch?v=XA2WjJbmmoM
" 
"     Martin Brochaus' talk at PyCon Asia Pacific 2012 Conference,
"         'Vim as a Python IDE'
"         https://www.youtube.com/watch?v=YhqsjUUHj6g
"     
"

" Auto source .vimrc on exit
augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

" Don't act like Vi  (required before Vundle setup)
set nocompatible


"------------------------------------------------------------------------------
" Vundle Setup
"
" Must be included near the beginning of .vimrc

"Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

Plugin 'VundleVim/Vundle.vim'  " required
"Plugin 'rakr/vim-one'  " only for gvim?
Plugin 'sickill/vim-monokai'
Plugin 'joshdick/onedark.vim'
Plugin 'sheerun/vim-polyglot'  " improved syntax hilighting
"Plugin 'kevinw/pyflakes-vim'  " python syntax checking
Plugin 'vim-syntastic/syntastic'  " syntax checking
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal


"-----------------------------------------------------------------------------'
" Plugin Specific Configuration

let g:syntastic_python_checkers = ['flake8']

"------------------------------------------------------------------------------
" Features
"
" Nice to have options

" Enable syntax highlighting
syntax enable

" Search into subdirectories
set path+=**

" Display all matching filetypes upon tab completion
set wildmenu

" Enable tag matching upon <C-]> (e.g. with ctags)
set tags+=tags;$HOME

" Intuitive copy and paste
set pastetoggle=<F2>
set clipboard=unnamed

" Easier switching between files
set hidden

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start
 
" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent
 
" Stop certain movements from always going to the first character of a line.
set nostartofline
 
" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler
 
" Always display the status line, even if only one window is displayed
set laststatus=2
 
" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm
 
" Use visual bell instead of beeping when doing something wrong, and unset
" it to do nothing
set visualbell
set t_vb=
 
" Enable use of the mouse for all modes
set mouse=a
 
" Set the command window height to 2 lines, to avoid many cases of having to
" 'press <Enter> to continue'
set cmdheight=2
 
" Display line numbers on the left
set number
 
" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200
 
" Indentation settings for using 4 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=4
set softtabstop=4
set expandtab
" When indenting using >> or <<, will indent to next multple of `shiftwidth`
set shiftround

" Highlight all search matches
:set hlsearch
 

"------------------------------------------------------------------------------
" Mappings
"
" Bind common and useful tasks to key combinations
 
" A common remapping of the leader key for extra functionality
" Referred to as <Leader>
:let mapleader = ","

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$
 
" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" Map // to search for visually selected text
vnoremap // y/<C-R>"<CR>

" Map sort
vnoremap <Leader>s :sort<CR>

" Easier block indenting
vnoremap < <gv
vnoremap > >gv


"------------------------------------------------------------------------------
" Color
"
" Pertaining to the coloring of the visual layout of vim

" Highlight text that goes over 80 character width
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)
"set colorcolumn=80  " include this line for an actual column

" Color scheme (must exist in ./.vim/colors)
"colorscheme sweyla941432
" Adaptation of atom's one-dark theme
colorscheme onedark

"------------------------------------------------------------------------------
" Python Specific
"
" Replace with vundle plugins?

" Low maintenance snippet manager
nnoremap ,main G:read ~/.vim/snippets/python.mainj4la
nnoremap ,pdb oimport pdb; pdb.set_trace()

